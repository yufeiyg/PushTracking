"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class lcmt_robot_output(object):

    __slots__ = ["utime", "num_positions", "num_velocities", "num_efforts", "position_names", "position", "velocity_names", "velocity", "effort_names", "effort", "imu_accel"]

    __typenames__ = ["int64_t", "int32_t", "int32_t", "int32_t", "string", "double", "string", "double", "string", "double", "double"]

    __dimensions__ = [None, None, None, None, ["num_positions"], ["num_positions"], ["num_velocities"], ["num_velocities"], ["num_efforts"], ["num_efforts"], [3]]

    def __init__(self):
        self.utime = 0
        """ LCM Type: int64_t """
        self.num_positions = 0
        """ LCM Type: int32_t """
        self.num_velocities = 0
        """ LCM Type: int32_t """
        self.num_efforts = 0
        """ LCM Type: int32_t """
        self.position_names = []
        """ LCM Type: string[num_positions] """
        self.position = []
        """ LCM Type: double[num_positions] """
        self.velocity_names = []
        """ LCM Type: string[num_velocities] """
        self.velocity = []
        """ LCM Type: double[num_velocities] """
        self.effort_names = []
        """ LCM Type: string[num_efforts] """
        self.effort = []
        """ LCM Type: double[num_efforts] """
        self.imu_accel = [ 0.0 for dim0 in range(3) ]
        """ LCM Type: double[3] """

    def encode(self):
        buf = BytesIO()
        buf.write(lcmt_robot_output._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qiii", self.utime, self.num_positions, self.num_velocities, self.num_efforts))
        for i0 in range(self.num_positions):
            __position_names_encoded = self.position_names[i0].encode('utf-8')
            buf.write(struct.pack('>I', len(__position_names_encoded)+1))
            buf.write(__position_names_encoded)
            buf.write(b"\0")
        buf.write(struct.pack('>%dd' % self.num_positions, *self.position[:self.num_positions]))
        for i0 in range(self.num_velocities):
            __velocity_names_encoded = self.velocity_names[i0].encode('utf-8')
            buf.write(struct.pack('>I', len(__velocity_names_encoded)+1))
            buf.write(__velocity_names_encoded)
            buf.write(b"\0")
        buf.write(struct.pack('>%dd' % self.num_velocities, *self.velocity[:self.num_velocities]))
        for i0 in range(self.num_efforts):
            __effort_names_encoded = self.effort_names[i0].encode('utf-8')
            buf.write(struct.pack('>I', len(__effort_names_encoded)+1))
            buf.write(__effort_names_encoded)
            buf.write(b"\0")
        buf.write(struct.pack('>%dd' % self.num_efforts, *self.effort[:self.num_efforts]))
        buf.write(struct.pack('>3d', *self.imu_accel[:3]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != lcmt_robot_output._get_packed_fingerprint():
            raise ValueError("Decode error")
        return lcmt_robot_output._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = lcmt_robot_output()
        self.utime, self.num_positions, self.num_velocities, self.num_efforts = struct.unpack(">qiii", buf.read(20))
        self.position_names = []
        for i0 in range(self.num_positions):
            __position_names_len = struct.unpack('>I', buf.read(4))[0]
            self.position_names.append(buf.read(__position_names_len)[:-1].decode('utf-8', 'replace'))
        self.position = struct.unpack('>%dd' % self.num_positions, buf.read(self.num_positions * 8))
        self.velocity_names = []
        for i0 in range(self.num_velocities):
            __velocity_names_len = struct.unpack('>I', buf.read(4))[0]
            self.velocity_names.append(buf.read(__velocity_names_len)[:-1].decode('utf-8', 'replace'))
        self.velocity = struct.unpack('>%dd' % self.num_velocities, buf.read(self.num_velocities * 8))
        self.effort_names = []
        for i0 in range(self.num_efforts):
            __effort_names_len = struct.unpack('>I', buf.read(4))[0]
            self.effort_names.append(buf.read(__effort_names_len)[:-1].decode('utf-8', 'replace'))
        self.effort = struct.unpack('>%dd' % self.num_efforts, buf.read(self.num_efforts * 8))
        self.imu_accel = struct.unpack('>3d', buf.read(24))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if lcmt_robot_output in parents: return 0
        tmphash = (0xaa780c82226ac6e0) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if lcmt_robot_output._packed_fingerprint is None:
            lcmt_robot_output._packed_fingerprint = struct.pack(">Q", lcmt_robot_output._get_hash_recursive([]))
        return lcmt_robot_output._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", lcmt_robot_output._get_packed_fingerprint())[0]

